pragma solidity ^0.4.14;

contract Payroll {
    struct Employee {
         address id;
         uint salary;
         uint lastPayday;
    }

         address owner;
         mapping(address => Employee)employees;
         uint constant payDuration = 10 seconds;
         uint totalSalary;
         
    function Payroll() {
         owner = msg.sender;
    }
    
    function _partialPaid(Employee employee) private {
         uint payment = employee.salary * (now - 

employee.lastPayday) / payDuration;
         employee.id.transfer(payment);
    }   
    
    function addEmployee(address employeeId,uint salary){
         require(msg.sender == owner);
         var employee = employees[employeeId];
         assert(employee.id == 0x0);
         totalSalary += salary * 1 ether;
         employees[employeeId] = Employee(employeeId,salary * 1 

ether,now);
    }
    
    function removeEmployee(address employeeId){
         require(msg.sender == owner); 
         var employee = employees[employeeId];
         assert(employee.id != 0x0);
        
         _partialPaid(employee);
         totalSalary -= employees[employeeId].salary;
         delete employees[employeeId];
    }
    
    function updateEmployee(address employeeId, uint salary) {
         require(msg.sender == owner);
         var employee = employees[employeeId];
         assert(employee.id != 0x0);
        
         _partialPaid(employee);
         totalSalary -= employees[employeeId].salary;
         employees[employeeId].salary = salary * 1 ether;
         totalSalary += employees[employeeId].salary;
         employees[employeeId].lastPayday = now;
    }
    
    function addFund() payable returns (uint) {
         return this.balance;
    }
    
    function calculateRunway() returns (uint) {
         return this.balance / totalSalary;
    }    
    
    function hasEnoughFund() returns (bool) {
         return calculateRunway() > 0;
    }
    
    function getPaid() {
         var employee = employees[msg.sender];
         assert(employee.id != 0x0);
        
         uint nextPayday = employee.lastPayday + payDuration;
         assert(nextPayday < now);
        
         employees[msg.sender].lastPayday = nextPayday;
         employee.id.transfer(employee.salary);
    }
}
/*
优化前的gas消耗：

员工数量  transcation  execution
   1       22966       1694 
   2       23747       2475
   3       24528       3256  
   4       25309       4037
   5       26090       4818    
   6       26871       5599  
   7       27652       6380
   8       28433       7161
   9       29214       7942
   10      29995       8723



优化后的gas消耗：

员工数量  transcation  execution
   1       22124         852 
   2       22124         852
   3       22124         852  
   4       22124         852
   5       22124         852   
   6       22124         852  
   7       22124         852
   8       22124         852
   9       22124         852
   10      22124         852
*/
